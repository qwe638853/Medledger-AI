// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/data.proto

package health

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthService_UploadReport_FullMethodName              = "/health.HealthService/UploadReport"
	HealthService_Login_FullMethodName                     = "/health.HealthService/Login"
	HealthService_RegisterUser_FullMethodName              = "/health.HealthService/RegisterUser"
	HealthService_RegisterInsurer_FullMethodName           = "/health.HealthService/RegisterInsurer"
	HealthService_ListMyReports_FullMethodName             = "/health.HealthService/ListMyReports"
	HealthService_ListMyAuthorizedTickets_FullMethodName   = "/health.HealthService/ListMyAuthorizedTickets"
	HealthService_RequestAccess_FullMethodName             = "/health.HealthService/RequestAccess"
	HealthService_ListAccessRequests_FullMethodName        = "/health.HealthService/ListAccessRequests"
	HealthService_ApproveAccessRequest_FullMethodName      = "/health.HealthService/ApproveAccessRequest"
	HealthService_RejectAccessRequest_FullMethodName       = "/health.HealthService/RejectAccessRequest"
	HealthService_ListAuthorizedReports_FullMethodName     = "/health.HealthService/ListAuthorizedReports"
	HealthService_ListReportMetaByPatientID_FullMethodName = "/health.HealthService/ListReportMetaByPatientID"
	HealthService_ViewAuthorizedReport_FullMethodName      = "/health.HealthService/ViewAuthorizedReport"
	HealthService_ListMyAccessRequests_FullMethodName      = "/health.HealthService/ListMyAccessRequests"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	// 健檢中心上傳報告
	UploadReport(ctx context.Context, in *UploadReportRequest, opts ...grpc.CallOption) (*UploadReportResponse, error)
	// 登入
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 用戶註冊
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 保險業者註冊
	RegisterInsurer(ctx context.Context, in *RegisterInsurerRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 用戶讀取自己的報告
	ListMyReports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMyReportsResponse, error)
	// 用戶讀取授權紀錄
	ListMyAuthorizedTickets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthorizedTicketsResponse, error)
	// 請求授權
	RequestAccess(ctx context.Context, in *RequestAccessRequest, opts ...grpc.CallOption) (*RequestAccessResponse, error)
	// 請求授權列表
	ListAccessRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAccessRequestsResponse, error)
	// 接受授權
	ApproveAccessRequest(ctx context.Context, in *ApproveAccessRequestRequest, opts ...grpc.CallOption) (*ApproveAccessRequestResponse, error)
	// 拒絕授權
	RejectAccessRequest(ctx context.Context, in *RejectAccessRequestRequest, opts ...grpc.CallOption) (*RejectAccessRequestResponse, error)
	ListAuthorizedReports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthorizedReportsResponse, error)
	ListReportMetaByPatientID(ctx context.Context, in *PatientIDRequest, opts ...grpc.CallOption) (*ListReportMetaResponse, error)
	// 保險業者讀授權報告
	ViewAuthorizedReport(ctx context.Context, in *ViewAuthorizedReportRequest, opts ...grpc.CallOption) (*ViewAuthorizedReportResponse, error)
	// 保險業者查看自己發出的授權請求
	ListMyAccessRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMyAccessRequestsResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) UploadReport(ctx context.Context, in *UploadReportRequest, opts ...grpc.CallOption) (*UploadReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadReportResponse)
	err := c.cc.Invoke(ctx, HealthService_UploadReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, HealthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, HealthService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) RegisterInsurer(ctx context.Context, in *RegisterInsurerRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, HealthService_RegisterInsurer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListMyReports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMyReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyReportsResponse)
	err := c.cc.Invoke(ctx, HealthService_ListMyReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListMyAuthorizedTickets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthorizedTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthorizedTicketsResponse)
	err := c.cc.Invoke(ctx, HealthService_ListMyAuthorizedTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) RequestAccess(ctx context.Context, in *RequestAccessRequest, opts ...grpc.CallOption) (*RequestAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAccessResponse)
	err := c.cc.Invoke(ctx, HealthService_RequestAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListAccessRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAccessRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessRequestsResponse)
	err := c.cc.Invoke(ctx, HealthService_ListAccessRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ApproveAccessRequest(ctx context.Context, in *ApproveAccessRequestRequest, opts ...grpc.CallOption) (*ApproveAccessRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveAccessRequestResponse)
	err := c.cc.Invoke(ctx, HealthService_ApproveAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) RejectAccessRequest(ctx context.Context, in *RejectAccessRequestRequest, opts ...grpc.CallOption) (*RejectAccessRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectAccessRequestResponse)
	err := c.cc.Invoke(ctx, HealthService_RejectAccessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListAuthorizedReports(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAuthorizedReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuthorizedReportsResponse)
	err := c.cc.Invoke(ctx, HealthService_ListAuthorizedReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListReportMetaByPatientID(ctx context.Context, in *PatientIDRequest, opts ...grpc.CallOption) (*ListReportMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReportMetaResponse)
	err := c.cc.Invoke(ctx, HealthService_ListReportMetaByPatientID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ViewAuthorizedReport(ctx context.Context, in *ViewAuthorizedReportRequest, opts ...grpc.CallOption) (*ViewAuthorizedReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewAuthorizedReportResponse)
	err := c.cc.Invoke(ctx, HealthService_ViewAuthorizedReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListMyAccessRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMyAccessRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyAccessRequestsResponse)
	err := c.cc.Invoke(ctx, HealthService_ListMyAccessRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility.
type HealthServiceServer interface {
	// 健檢中心上傳報告
	UploadReport(context.Context, *UploadReportRequest) (*UploadReportResponse, error)
	// 登入
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 用戶註冊
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterResponse, error)
	// 保險業者註冊
	RegisterInsurer(context.Context, *RegisterInsurerRequest) (*RegisterResponse, error)
	// 用戶讀取自己的報告
	ListMyReports(context.Context, *emptypb.Empty) (*ListMyReportsResponse, error)
	// 用戶讀取授權紀錄
	ListMyAuthorizedTickets(context.Context, *emptypb.Empty) (*ListAuthorizedTicketsResponse, error)
	// 請求授權
	RequestAccess(context.Context, *RequestAccessRequest) (*RequestAccessResponse, error)
	// 請求授權列表
	ListAccessRequests(context.Context, *emptypb.Empty) (*ListAccessRequestsResponse, error)
	// 接受授權
	ApproveAccessRequest(context.Context, *ApproveAccessRequestRequest) (*ApproveAccessRequestResponse, error)
	// 拒絕授權
	RejectAccessRequest(context.Context, *RejectAccessRequestRequest) (*RejectAccessRequestResponse, error)
	ListAuthorizedReports(context.Context, *emptypb.Empty) (*ListAuthorizedReportsResponse, error)
	ListReportMetaByPatientID(context.Context, *PatientIDRequest) (*ListReportMetaResponse, error)
	// 保險業者讀授權報告
	ViewAuthorizedReport(context.Context, *ViewAuthorizedReportRequest) (*ViewAuthorizedReportResponse, error)
	// 保險業者查看自己發出的授權請求
	ListMyAccessRequests(context.Context, *emptypb.Empty) (*ListMyAccessRequestsResponse, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServiceServer struct{}

func (UnimplementedHealthServiceServer) UploadReport(context.Context, *UploadReportRequest) (*UploadReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReport not implemented")
}
func (UnimplementedHealthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHealthServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedHealthServiceServer) RegisterInsurer(context.Context, *RegisterInsurerRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInsurer not implemented")
}
func (UnimplementedHealthServiceServer) ListMyReports(context.Context, *emptypb.Empty) (*ListMyReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyReports not implemented")
}
func (UnimplementedHealthServiceServer) ListMyAuthorizedTickets(context.Context, *emptypb.Empty) (*ListAuthorizedTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyAuthorizedTickets not implemented")
}
func (UnimplementedHealthServiceServer) RequestAccess(context.Context, *RequestAccessRequest) (*RequestAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedHealthServiceServer) ListAccessRequests(context.Context, *emptypb.Empty) (*ListAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessRequests not implemented")
}
func (UnimplementedHealthServiceServer) ApproveAccessRequest(context.Context, *ApproveAccessRequestRequest) (*ApproveAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAccessRequest not implemented")
}
func (UnimplementedHealthServiceServer) RejectAccessRequest(context.Context, *RejectAccessRequestRequest) (*RejectAccessRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAccessRequest not implemented")
}
func (UnimplementedHealthServiceServer) ListAuthorizedReports(context.Context, *emptypb.Empty) (*ListAuthorizedReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizedReports not implemented")
}
func (UnimplementedHealthServiceServer) ListReportMetaByPatientID(context.Context, *PatientIDRequest) (*ListReportMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportMetaByPatientID not implemented")
}
func (UnimplementedHealthServiceServer) ViewAuthorizedReport(context.Context, *ViewAuthorizedReportRequest) (*ViewAuthorizedReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAuthorizedReport not implemented")
}
func (UnimplementedHealthServiceServer) ListMyAccessRequests(context.Context, *emptypb.Empty) (*ListMyAccessRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyAccessRequests not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}
func (UnimplementedHealthServiceServer) testEmbeddedByValue()                       {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_UploadReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).UploadReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_UploadReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).UploadReport(ctx, req.(*UploadReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_RegisterInsurer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInsurerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).RegisterInsurer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_RegisterInsurer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).RegisterInsurer(ctx, req.(*RegisterInsurerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListMyReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListMyReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListMyReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListMyReports(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListMyAuthorizedTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListMyAuthorizedTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListMyAuthorizedTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListMyAuthorizedTickets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_RequestAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).RequestAccess(ctx, req.(*RequestAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListAccessRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListAccessRequests(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ApproveAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ApproveAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ApproveAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ApproveAccessRequest(ctx, req.(*ApproveAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_RejectAccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAccessRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).RejectAccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_RejectAccessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).RejectAccessRequest(ctx, req.(*RejectAccessRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListAuthorizedReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListAuthorizedReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListAuthorizedReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListAuthorizedReports(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListReportMetaByPatientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListReportMetaByPatientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListReportMetaByPatientID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListReportMetaByPatientID(ctx, req.(*PatientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ViewAuthorizedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAuthorizedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ViewAuthorizedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ViewAuthorizedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ViewAuthorizedReport(ctx, req.(*ViewAuthorizedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListMyAccessRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListMyAccessRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListMyAccessRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListMyAccessRequests(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadReport",
			Handler:    _HealthService_UploadReport_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HealthService_Login_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _HealthService_RegisterUser_Handler,
		},
		{
			MethodName: "RegisterInsurer",
			Handler:    _HealthService_RegisterInsurer_Handler,
		},
		{
			MethodName: "ListMyReports",
			Handler:    _HealthService_ListMyReports_Handler,
		},
		{
			MethodName: "ListMyAuthorizedTickets",
			Handler:    _HealthService_ListMyAuthorizedTickets_Handler,
		},
		{
			MethodName: "RequestAccess",
			Handler:    _HealthService_RequestAccess_Handler,
		},
		{
			MethodName: "ListAccessRequests",
			Handler:    _HealthService_ListAccessRequests_Handler,
		},
		{
			MethodName: "ApproveAccessRequest",
			Handler:    _HealthService_ApproveAccessRequest_Handler,
		},
		{
			MethodName: "RejectAccessRequest",
			Handler:    _HealthService_RejectAccessRequest_Handler,
		},
		{
			MethodName: "ListAuthorizedReports",
			Handler:    _HealthService_ListAuthorizedReports_Handler,
		},
		{
			MethodName: "ListReportMetaByPatientID",
			Handler:    _HealthService_ListReportMetaByPatientID_Handler,
		},
		{
			MethodName: "ViewAuthorizedReport",
			Handler:    _HealthService_ViewAuthorizedReport_Handler,
		},
		{
			MethodName: "ListMyAccessRequests",
			Handler:    _HealthService_ListMyAccessRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data.proto",
}
